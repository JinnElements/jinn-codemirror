@top Document {
    (
        block
    )+
}

block {
    Div { "<=" ( block )+ "=>" } |
    Recto { "<D=.r" ( block )+ "=D>" } |
    Verso { "<D=.v" ( block )+ "=D>" } |
    Part { "<D=." PartId ( block )+ "=D>"} |
    Fragment { "<D=." FragmentNum ( block )+ "=D>"} |
    Column { "<D=." ColumnNum ( block )+ "=D>" } | 
    Foreign { "~|" ( block )+ ForeignEnd } |
    Inline
}

Inline {
    LineBreakWrapped |
    LineBreak |
    Number |
    AbbrevUnresolved |
    Abbrev | 
    Supplied | 
    lost |
    Unclear |
    Text |
    LostLines |
    Illegible |
    Erasure
}

Text {
    chars | "." | QuestionMark | space | "="
}

Abbrev {
    "(" Inline+ ")"
}

AbbrevUnresolved {
    "(|" Inline+ "|)"
}

Supplied {
    "<" Inline+ CertLow? ">"
}

lost {
    GapUnknown { "[.?]" } |
    Gap { "[." Number "]" } |
    SuppliedLost { "[" Inline+ CertLow? "]" }
}

Erasure {
    "〚" Inline+ "〛"
}

LostLines {
    lostLinesStart ( Number | QuestionMark ) "lin"
}

@external tokens charsToken from "../tokens.js" { chars, lostLinesStart }
@external tokens unclearToken from "../tokens.js" { Unclear }

@tokens {
    space { " " }

    CertLow { "(?)" }

    QuestionMark { "?" }

    Number { std.digit+ }

    FragmentNum {
        Number ".fragment"
    }

    ColumnNum {
        ( $[a-zA-Z] | std.digit )+ ".column"
    }

    PartId {
        ( $[a-zA-Z] | std.digit )+ ".part"
    }

    LineBreak {
        Number "." space?
    }

    LineBreakWrapped {
        Number ".-" space?
    }

    Illegible {
        "." ( Number | QuestionMark ) "lin"?
    }

    ForeignEnd {
        "|~" $[a-zA-Z]+
    }

    @precedence { Illegible, ".", FragmentNum, ColumnNum, LineBreakWrapped, LineBreak, Number }

}

// @external tokens eofToken from "./tokens" { eof }
// @external tokens sofToken from "./tokens" { sof }